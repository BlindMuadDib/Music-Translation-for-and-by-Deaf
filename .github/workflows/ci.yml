name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.x
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Install kind and kubectl
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    - name: Pull Docker images
      run: |
        docker pull docker.io/blindmuaddib/music-translator:0.0.5
        docker pull docker.io/blindmuaddib/separate-endpoint:1
        docker pull docker.io/blindmuaddib/align-endpoint:1
    - name: Start Kubernetes cluster (kind)
      run: kind create cluster --config k8s/kind-config.yaml --wait 5m
    - name: Load Docker images onto cluster
      run: |
        kind load docker-image docker.io/blindmuaddib/music-translator:0.0.5
        kind load docker-image docker.io/blindmuaddib/separate-endpoint:1
        kind load docker-image docker.io/blindmuaddib/align-endpoint:1

    - name: Install NGINX Ingress Controller
      run: kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml
    - name: Wait for NGINX Ingress Controller to be ready
      run: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
    - name: Apply Kubernetes YAML files
      run: |
        kubectl apply -f k8s/worker-deployment.yaml
        kubectl apply -f k8s/persistent-volumes.yaml
        kubectl apply -f k8s/persistent-volumes-claims.yaml
        kubectl apply -f k8s/html-config.yaml
        kubectl apply -f k8s/nginx-config.yaml
        kubectl apply -f k8s/redis-deployment.yaml
        kubectl apply -f k8s/main-deployment.yaml
        kubectl apply -f k8s/demucs-deployment.yaml
        kubectl apply -f k8s/mfa-deployment.yaml
        kubectl apply -f k8s/nginx-deployment.yaml
        kubectl apply -f k8s/redis-service.yaml
        kubectl apply -f k8s/main-service.yaml
        kubectl apply -f k8s/demucs-service.yaml
        kubectl apply -f k8s/mfa-service.yaml
        kubectl apply -f k8s/nginx-service.yaml
        kubectl apply -f k8s/ingress.yaml
    - name: Wait for the pods to become ready
      run: |
        kubectl wait --for=condition=available deployment/translator-deployment --timeout=300s
        kubectl wait --for=condition=available deployment/translator-worker --timeout=300s
        kubectl wait --for=condition=available deployment/redis --timeout=300s
        kubectl wait --for=condition=available deployment/nginx-deployment --timeout=300s
        kubectl wait --for=condition=available deployment/demucs-deployment --timeout=1200s
        kubectl wait --for=condition=available deployment/mfa-deployment --timeout=1200s
    - name: Run tests with pytest
      run: pytest
    - name: Teardown Kubernetes cluster (kind)
      if: always()
      run: kind delete cluster
