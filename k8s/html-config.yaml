---
apiVersion: v1
kind: ConfigMap
metadata:
  name: html-config
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Music Translator for and by Deaf (Alpha)</title>
      <style>
        body { font-family: sans-serif; text-align: center; padding: 20px; }
        a { color: blue; text-decoration: none; }
        a:hover { text-decoration: underline; }
        .form-container { max-width: 500px; margin: 20px auto; padding: 20px; border: 1px solid #ccc; border-radius: 8px; }
        .form-container div { margin-bottom: 15px; text-align: left; }
        .form-container label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-container input[type="file"],
        .form-container input[type="text"],
        .form-container button { width: 95%; padding: 10px; font-size: 1em; }
        .form-container button { width: 100%; cursor: pointer; background-color: #8A2BE2; color: BlueViolet; border: none; border-radius: 4px; margin-top: 10px;}
        .form-container button:hover { background-color: #0056b3; }
        #loading-indicator { display: none; margin: 20px; color: green; font-weight: bold; }
        #error-message {display: none; margin: 20px; padding: 10px; background-color: #f8d7da; color: #DAA520; border: 1px solid #f5c6cb; border-radius: 4px; }
        #result-display { display: none; margin: 20px; padding: 15px; background-color: #e2e3e5; border: 1px solid #d6d8db; border-radius: 4px; text-align: left; white-space: pre-wrap; /* Preserve whitespace and wrap */ word-wrap: break-word; font-family: monospace; }
        .ul-no-style { list-style-type: none; padding: 0; }
      </style>
    </head>
    <body>
      <h1>Music Translator for and by Deaf (Alpha)</h1>
      <p>Welcome! Upload a <strong>.wav</strong> audio file, its corresponding <strong>.txt</strong> lyrics , and provide an access code.</p>

      <div class="form-container">
        <form id="translate-form">
          <div>
            <label for="audio">Audio File (.wav):</label>
            <input type="file" id="audio" name="audio" accept="audio/wav" required>
          </div>
          <div>
            <label for="lyrics">Lyrics File (.txt):</label>
            <input type="file" id="lyrics" name="lyrics" accept="text/plain" required>
          </div>
          <div>
            <label for="access_code">Access Code:</label>
            <input type="text" id="access_code" name="access_code" required>
          </div>
          <button type="button" id="submit-button">Translate</button>
        </form>
      </div>

      <div id="loading-indicator">Processing... Please wait. This may take several minutes.</div>
      <div id="error-message"></div>
      <div id="result-display"></div>

      <hr style="margin-top: 30px;">
      <p>Source code: <a href="https://github.com/BlindMuadDib/Music-Translator-for-and-by-Deaf" target="_blank">GitHub Repository</a></p>
      <h2>Acknowledgements</h2>
      <ul class="ul-no-style">
        <li>Montreal Forced Aligner Tool</li>
        <li>Demucs</li>
      </ul>

      <script>
        const form = document.getElementById('translate-form');
        const submitButton = document.getElementById('submit-button');
        const audioInput = document.getElementById('audio');
        const lyricsInput = document.getElementById('lyrics');
        const accessCodeInput = document.getElementById('access_code');
        const loadingIndicator = document.getElementById('loading-indicator');
        const errorMessageDiv = document.getElementById('error-message');
        const resultDisplayDiv = document.getElementById('result-display');
        let pollingIntervalId = null; // Variable to hold interval ID

        // --- Polling Function ---
        function pollJobStatus(job_id, accessCode) {
          loadingIndicator.textContent = 'Processing... Status: Checking'; // Initial polling message

          // Clear previous interval if any
          if (pollingIntervalId) {
            clearInterval(pollingIntervalId);
          }

          pollingIntervalId = setInterval(async () => {
            try {
              const resultsUrl = `/results/${job_id}`; // Construct the results URL

              const response = await fetch(resultsUrl, {method: 'GET'});

              // Check fr non-JSON responses or network errors first
              if (!response.ok) {
                let errorMsg = `Error fetching results: ${response.status} ${response.statusText}`;
                try {
                  const errorData = await response.json();
                  if(errorData && (errorData.message || errorData.error)) {
                    errorMsg = errorData.message || errorData.error;
                  }
                } catch(e) { /* Ignore JSON parse error if body isn't JSON */ }

                throw new Error(errorMsg); // Throw to be caught below
              }

              const data = await response.json();
              console.log("Polling status:", data); // Debugging

              loadingIndicator.textContent = `Processing... Status: ${data.status}`;

              if (data.status === 'finished') {
                clearInterval(pollingIntervalId); // Stop polling
                pollingIntervalId = null;
                loadingIndicator.style.display = 'none'; // Hide loading
                // Display result (assuming data.result is the JSON oject)
                resultDisplayDiv.textContent = JSON.stringify(data.result, null, 2);
                resultDisplayDiv.style.display = 'block';
                submitButton.disabled = false;
              } else if (data.status === 'failed') {
                clearInterval(pollingIntervalId); // Stop polling
                pollingIntervalId = null;
                pollingIndicator.style.display = 'none'; // Hide loading
                errorMessageDiv.textContent = data.message || 'Translation job failed. Please check logs or try again.';
                errorMessageDiv.style.display = 'block';
                submitButton.disabled = false; // Re-enable button
              } else if (data.status === 'error') { // Handle specific error status from results endpoint
                clearInterval(pollingIntervalId);
                pollingIntervalId = null;
                loadingIndicator.style.display = 'none';
                errorMessageDiv.textContent = data.message || 'Error retrieving job status.';
                errorMessageDiv.style.display = 'block';
                submitButton.disabled = false;
              }
              // else status is 'queued', 'started', 'deferred' -> continue polling
            } catch (error) {
              console.error('Error polling job status:', error);
              clearInterval(pollingIntervalId); // Stop polling on error
              pollingIntervalId = null;
              errorMessageDiv.textContent = `Error checking translation status: ${error.message}`;
              errorMessageDiv.style.display = 'block';
              submitButton.disabled = false; // Re-enable button
            }
          }, 5000); // Poll every 5 seconds (adjust as needed)
        }

        // --- Submit Button Event Listener ---
        submitButton.addEventListener('click', async (event) => {
          // Basic validation (HTML5 'required' helps, but JS check is good too)
          if (!form.checkValidity()) {
            form.reportValidity(); // Show browser validation messages
            return;
          }

          // Stop any previous polling
          if (pollingIntervalId) {
            clearInterval(pollingIntervalId);
            pollingIntervalId = null;
          }

          // Clear previous state and show loading
          errorMessageDiv.style.display = 'none';
          errorMessageDiv.textContent = '';
          resultDisplayDiv.style.display = 'none';
          resultDisplayDiv.textContent = '';
          loadingIndicator.textContent = 'Uploading and submitting job ...';
          loadingIndicator.style.display = 'block';
          submitButton.disabled = true; // Prevent double-clicks

          // Prepare form data
          const formData = new FormData();
          formData.append('audio', audioInput.files[0]);
          formData.append('lyrics', lyricsInput.files[0]);
          // Access code is needed by the backend's validate_access function
          const accessCode = accessCodeInput.value;

          // Construct URL with access code as query parameter (matches backend expectation)
          const url = `/translate?access_code=${encodeURIComponent(accessCode)}`;

          try {
            // Send request using fetch
            const response = await fetch(url, {
              method: 'POST',
              body: formData, // Send audio/lyrics as multipart/form-data
            });

            // Check for Accepted status (202)
            if (response.status === 202) {
              const resultData = await response.json(); // Parse successful JSON response
              if (resultData.job_id) {
                // Job submitted successfully, start polling
                loadingIndicator.textContent = 'Job submitted! Processing ...';
                pollJobStatus(resultData.job_id, accessCode); // Start polling
                // Keep button disabled while polling
              } else {
                throw new Error("Submission accepted, but no Job ID received.");
              }
            } else {
              // Handle errors (4xx, 5xx)
              let errorMsg = `Error: ${response.status} ${response.statusText}`;
              try {
                // Try to parse error JSON from backend { "error": "message" }
                const errorData = await response.json();
                if (errorData && errorData.error) {
                  errorMsg = errorData.error;
                }
              } catch (e) {
                console.warn("Could not parse error response as JSON.");
                throw new Error(errorMsg); // Throw to be caught below
              }
            }
          } catch (error) {
            // Handle network errors or other fetch issues
            console.error("Fetch error:", error);
            errorMessageDiv.textContent = `Submission failed: ${error.message}`;
            errorMessageDiv.style.display = 'block';
            loadingIndicator.style.display = 'none'; // Hide loading on submission error
            submitButton.disabled = false;
          }
        });
      </script>
    </body>
    </html>

